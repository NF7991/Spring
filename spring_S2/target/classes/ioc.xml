<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">
    <!--
    在进行框架配置的时候，可以使用xml文件，也可以使用注解的方式
    很多人觉得xml的方式比较麻烦，但是xml的配置方式还是要学习的，
    因为在项目开发过程中很多情况下是xml和注解一起工作，而且xml配置的方式比较完整
    -->

    <!--
    name:表示参数列表的名称
    value:表示实际的具体值
    type:表示值的类型
    index:表示值的下标，从0开始
    -->

    <bean id="person" class="com.NF.bean.Person">
        <property name="id" value="1"></property>
        <property name="name" value="zhangsan"></property>
        <property name="age" value="20"></property>
        <property name="gender" value="男"></property>
        <!--<property name="date" value="2020/02/02"></property>-->
    </bean>

    <!--属性赋值，无参-->
    <!--<bean id="person1" class="com.NF.bean.Person">-->
        <!--<property name="id" value="1"></property>-->
        <!--<property name="name" value="zhangsan"></property>-->
        <!--<property name="age" value="20"></property>-->
        <!--<property name="gender" value="男"></property>-->
    <!--</bean>-->

    <!--//构造器 有参数-->
    <!--/*使用构造器方法赋值的时候，参数的name属性是由什么来决定的？
    由构造方法的参数名称决定的-->
    <!--name:表示参数列表的名称-->
    <!--value:表示实际的具体值-->
    <!--type:表示值的类型-->
    <!--index:表示值的下标，从0开始-->
    <bean id="person2" class="com.NF.bean.Person">
        <constructor-arg name="id" value="2"></constructor-arg>
        <constructor-arg name="name" value="lisi"></constructor-arg>
        <constructor-arg name="age" value="22"></constructor-arg>
        <constructor-arg name="gender" value="男"></constructor-arg>
    </bean>
    <!--当通过构造器方法赋值的时候，可以把name属性省略不写，
    但是要注意必须要保证参数值跟构造器的参数列表的顺序一致
    如果非要不一致的话，可以通过index的下标方式来标注，从0开始-->
    <bean id="person3" class="com.NF.bean.Person">
        <constructor-arg value="3"></constructor-arg>
        <constructor-arg value="lisi" index="1"></constructor-arg>
        <constructor-arg value="22"></constructor-arg>
        <constructor-arg value="男" index="3"></constructor-arg>
    </bean>

    <!--当有多个相同参数的构造方法存在的时候，默认情况下是覆盖的过程，
    后面的构造方法会覆盖前面的构造方法
    如果非要赋值给另外一个构造方法的话，可以使用type的参数来进行指定-->
    <bean id="person4" class="com.NF.bean.Person">
        <constructor-arg value="4"></constructor-arg>
        <constructor-arg value="wangwu" index="1"></constructor-arg>
        <constructor-arg value="22" type="java.lang.Integer"></constructor-arg>
    </bean>
    <!--总结：
         在日常工作中，一般都是用name,value的方式，
         很少有人去使用index或者type的方式，但是要注意各种情况出现的问题-->

    <!--
    使用p命名空间来给属性赋值
    -->
    <bean id="person5" class="com.NF.bean.Person" p:id="5" name="wuwu" p:age="25" p:gender="女">
    </bean>

    <!--给复杂类型进行赋值-->
    <bean id="person6" class="com.NF.bean.Person">
        <property name="id" value="6"></property>
        <property name="name" value="zhangsan6"></property>
        <property name="age" value="26"></property>
        <property name="gender" value="男"></property>
        <!--<property name="hobbios" value="book"></property>-->
        <!--给数组赋值,使用array标签-->
        <property name="hobbios">
            <array>
                <value>movie</value>
                <value>book</value>
                <value>other</value>
            </array>
        </property>
        <!--给引用类型赋值 可以使用ref引入外部bean-->
        <property name="address" ref="address"></property>

        <!--给list赋值-->
        <!--<property name="lists" value="1,2,3"></property>-->
        <property name="lists">
            <list>
                <!--使用内部bean,无法从IOC容器中直接获取对象的值-->
                <bean id="address2" class="com.NF.bean.Address">
                    <property name="province" value="上海市"></property>
                </bean>
                <bean class="com.NF.bean.Address">
                    <property name="province" value="江苏省"></property>
                </bean>

                <!--使用外部bean，可以随意从IOC容器获取对象的值-->
                <ref bean="address"></ref>
            </list>
        </property>

        <!--给set属性赋值-->
        <property name="sets">
            <set>
                <!-- k-v 的唯一性-->
                <value>zhangsan</value>
                <value>zhangsan</value>
                <value>lisi</value>
            </set>
        </property>

        <!--给map属性赋值-->
        <property name="maps">
            <map>
                <entry key="a" value="aaa"></entry>

                <entry key="address" value-ref="address"></entry>

                <entry key="address2">
                    <bean class="com.NF.bean.Address">
                        <property name="province" value="广东省"></property>
                    </bean>
                </entry>

                <entry>
                    <key><value>广西区</value></key>
                    <value>南宁市</value>
                </entry>

                <entry key="list">
                    <list>
                        <value>11</value>
                        <value>22</value>
                        <value>33</value>
                        <value>44</value>
                    </list>
                </entry>
            </map>
        </property>
        <!--给properties赋值-->
        <property name="properties">
            <props>
                <prop key="111">aaa</prop>
                <prop key="222">bbb</prop>
                <prop key="333">ccc</prop>
            </props>
        </property>


    </bean>
    <bean id="address" class="com.NF.bean.Address">
        <property name="province" value="湖北省"></property>
        <property name="city" value="武汉市"></property>
        <property name="town" value="江汉区"></property>
    </bean>


    <!--bean之间的继承关系-->
    <!--<bean id="parent" class="com.NF.bean.Person">-->
    <bean id="parent" class="com.NF.bean.Person" abstract="false">
        <property name="id" value="1"></property>
        <property name="name" value="zhangsan"></property>
        <property name="age" value="20"></property>
        <property name="gender" value="男"></property>
    </bean>
    <!--可以通过parent属性来获取父bean中的某些属性值-->
    <bean id="son" class="com.NF.bean.Person" parent="parent">
        <property name="name" value="haha"></property>
    </bean>
</beans>